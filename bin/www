#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('GSB-2D:server');
var http = require('http');

window = global;
global.serverSide = true;

var impactLib = require("../public/lib/impact/impact.js");
var gameMain = require("../public/lib/game/main.js");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io')(server);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', function(socket){
  let player = null;

  console.log('a user connected');

  socket.on('user_input', (data) => {

    if (player) {
      switch(data) {
        case "left": {
          player.left();
          break;
        }
        case "right": {
          player.right();
          break;
        }
        case "jump": {
          player.jump();
          break;
        }
        case "shoot": {
          player.shoot();
          break;
        }
    }

    }
  });

  socket.on('player-joined', function(data) {
    if (ig.game) {
      player = ig.game.spawnEntity('EntityPlayer',176,296,data);

      let entList = ig.game.entities.map(function(ele) {
        return {
          id: ele.id,
          pos: ele.pos,
          vel: ele.vel,
          angle: ele.angle,
          type: ele.name
        }
      });

      socket.emit('entities-initialise',player.id, entList)
    } else {
      console.log("Player joined before server was ready");
    }
  });

  socket.on('disconnect', function() {
    if (player) {
      console.log("player disconnected");
      ig.game.entities.erase( player );

    }
  });
});

global.io = io;
